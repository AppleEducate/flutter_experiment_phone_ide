import 'dart:math' show min;
import 'dart:collection';

void main() {
  final data = "class MyApp extends StatelessWidget {" +
  "@override"
  "Widget build(BuildContext context) {" +
    "return new MaterialApp(" +
      "title: 'Flutter Demo',"+
      "theme: new ThemeData(" +
        "primarySwatch: Colors.red," +
      "),"
      "home: IdeApp(child: new MyHomePage())," +
    ");" +
  "}"+
"}";
  final lexer = DartLexer(StringReader(data));
  while (true) {
    final type = lexer.advance();
    if (type == null) {
      break;
    }
    final token = data.substring(lexer.yyStart, lexer.yyStart + lexer.yyLength);
    print("$type $token");
  }
}

class StringReader implements LexerReader {
  StringReader(String data) : _data = data.codeUnits;
  final List<int> _data;
  int _offset = 0;

  @override
  int read(List<int> buffer, int offset, int length) {
    final read = min(_data.length - _offset, length);
    if (read == 0) {
      return -1;
    }
    for (int i = 0; i < read; i++) {
      buffer[offset + i] = _data[_offset + i];
    }
    _offset += read;
    return read;
  }

  @override
  void close() {
    // nothing
  }
}

/* user code: */
class State {
  const State(this.state, this.lBraceCount);

  final int lBraceCount;
  final int state;

  @override
  String toString() {
    return "yystate = $state " +
        (lBraceCount == 0 ? "" : "lBraceCount = $lBraceCount");
  }
}

abstract class LexerReader {
  int read(List<int> buffer, int offset, int length);

  void close();
}

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>D:/Simon/Desktop/Dart.flex</tt>
 */
class DartLexer {
  /** This character denotes the end of file */
  static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  static final int STATE_YYINITIAL = 0;
  static final int STATE_MULTI_LINE_COMMENT_STATE = 2;
  static final int STATE_QUO_STRING = 4;
  static final int STATE_THREE_QUO_STRING = 6;
  static final int STATE_APOS_STRING = 8;
  static final int STATE_THREE_APOS_STRING = 10;
  static final int STATE_SHORT_TEMPLATE_ENTRY = 12;
  static final int STATE_LONG_TEMPLATE_ENTRY = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  static final _ZZ_LEXSTATE = <int>[
    0,
    0,
    1,
    1,
    2,
    2,
    3,
    3,
    4,
    4,
    5,
    5,
    6,
    6,
    7,
    7,
  ];

  /**
   * Translates characters to character classes
   */
  // @formatter:off
  static final _ZZ_CMAP_PACKED = <int>[
    9,  0,  1,  5,  1,  8,  1,  0,  1,  5,  19,  0,  1,  5,  1,  7,  1,
    12,  1,  6,  1,  14,  1,  51,  1,  59,  1,  13,  1,  45,  1,  46,  1,
    10,  1,  19,  1,  53,  1,  48,  1,  16,  1,  9,  1,  20,  9,  1,  1,
    54,  1,  47,  1,  55,  1,  49,  1,  52,  1,  56,  1,  60,  4,  2,  1,
    17,  1,  2,  17,  3,  1,  22,  2,  3,  1,  43,  1,  61,  1,  44,  1,
    58,  1,  3,  1,  0,  1,  24,  1,  27,  1,  29,  1,  36,  1,  18,  1,
    4,  1,  42,  1,  30,  1,  34,  1,  3,  1,  28,  1,  31,  1,  37,  1,
    33,  1,  32,  1,  40,  1,  3,  1,  11,  1,  25,  1,  26,  1,  35,  1,
    41,  1,  39,  1,  21,  1,  38,  1,  3,  1,  15,  1,  57,  1,  23,  1,
    50,  65535,  0,  65535,  0,  65535,  0,  65535,  0,  65535,  0,  65535,  0,  65535,  0,  65535,
    0,  65535,  0,  65535,  0,  65535,  0,  65535,  0,  65535,  0,  65535,  0,  65535,  0,  65535,
    0,  65425,  0,
  ];
  // @formatter:on

  /**
   * Translates characters to character classes
   */
  static final _ZZ_CMAP = _zzUnpackCMap(_ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  static final _ZZ_ACTION = _zzUnpackAction();

  // @formatter:off
  static final _ZZ_ACTION_PACKED_0 = <int>[
    2,  0,  4,  1,  2,  0,  1,  2,  1,  3,  2,  4,  1,  5,  1,  6,  1,
    7,  1,  8,  1,  9,  1,  4,  1,  10,  1,  11,  1,  12,  1,  13,  1,
    4,  1,  14,  1,  3,  1,  15,  17,  4,  1,  16,  1,  17,  1,  18,  1,
    19,  1,  20,  1,  21,  1,  22,  1,  23,  1,  24,  1,  25,  1,  26,  1,
    27,  1,  28,  1,  29,  1,  30,  1,  31,  1,  32,  1,  33,  3,  34,  1,
    1,  1,  35,  1,  36,  1,  37,  1,  2,  1,  1,  2,  2,  1,  1,  1,
    2,  1,  1,  1,  2,  2,  38,  1,  6,  1,  39,  1,  40,  1,  0,  1,
    3,  3,  4,  1,  41,  1,  42,  1,  41,  1,  43,  1,  44,  1,  45,  2,
    46,  1,  4,  2,  0,  1,  3,  1,  47,  3,  4,  1,  48,  1,  49,  1,
    3,  1,  50,  17,  4,  1,  51,  1,  52,  4,  4,  1,  53,  1,  54,  1,
    55,  2,  4,  1,  56,  8,  4,  1,  57,  1,  58,  1,  59,  1,  60,  1,
    61,  1,  62,  1,  63,  1,  64,  1,  65,  1,  66,  1,  67,  1,  68,  1,
    69,  1,  70,  1,  71,  1,  72,  1,  73,  1,  0,  1,  74,  1,  75,  1,
    76,  1,  0,  1,  1,  2,  0,  1,  38,  1,  3,  2,  4,  1,  77,  1,
    4,  1,  78,  1,  79,  4,  46,  1,  4,  1,  80,  1,  81,  8,  4,  1,
    82,  6,  4,  1,  83,  12,  4,  1,  84,  9,  4,  1,  85,  1,  4,  1,
    86,  1,  87,  1,  88,  1,  89,  1,  90,  1,  91,  1,  38,  3,  4,  1,
    78,  1,  92,  1,  0,  1,  46,  2,  93,  4,  4,  1,  94,  1,  95,  5,
    4,  1,  96,  1,  4,  1,  97,  1,  4,  1,  98,  1,  4,  1,  99,  2,
    4,  1,  100,  5,  4,  1,  101,  3,  4,  1,  102,  7,  4,  1,  103,  1,
    104,  1,  105,  1,  106,  1,  4,  1,  107,  1,  108,  2,  0,  6,  4,  1,
    109,  1,  4,  1,  110,  1,  4,  1,  111,  1,  4,  1,  112,  1,  4,  1,
    113,  1,  114,  1,  115,  1,  116,  9,  4,  1,  117,  1,  118,  1,  119,  2,
    4,  2,  0,  1,  4,  1,  120,  2,  4,  1,  121,  1,  122,  1,  4,  1,
    123,  1,  124,  5,  4,  1,  125,  1,  4,  1,  126,  2,  4,  1,  127,  1,
    128,  1,  93,  1,  129,  1,  4,  1,  130,  1,  4,  1,  131,  2,  4,  1,
    132,  3,  4,  1,  133,  1,  134,  1,  135,  1,  136,  1,  4,  1,  137,  1,
    4,  1,  138,  1,  139,  1,  4,  1,  140,
  ];
  // @formatter:on

  static List<int> _zzUnpackAction() {
    final result = List<int>(364);
    int offset = 0;
    offset = __zzUnpackAction(_ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  static int __zzUnpackAction(List<int> packed, int offset, List<int> result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length;
    while (i < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates a state to a row index in the transition table
   */
  static final _ZZ_ROWMAP = _zzUnpackRowMap();

  // @formatter:off
  static final _ZZ_ROWMAP_PACKED_0 = <int>[
    0,  0,  0,  62,  0,  124,  0,  186,  0,  248,  0,  310,  0,  372,  0,  434,  0,
    496,  0,  558,  0,  620,  0,  682,  0,  744,  0,  806,  0,  868,  0,  930,  0,
    992,  0,  1054,  0,  1116,  0,  1178,  0,  496,  0,  1240,  0,  1302,  0,  1364,  0,
    1426,  0,  496,  0,  1488,  0,  1550,  0,  1612,  0,  1674,  0,  1736,  0,  1798,  0,
    1860,  0,  1922,  0,  1984,  0,  2046,  0,  2108,  0,  2170,  0,  2232,  0,  2294,  0,
    2356,  0,  2418,  0,  2480,  0,  496,  0,  496,  0,  496,  0,  496,  0,  496,  0,
    2542,  0,  2604,  0,  2666,  0,  2728,  0,  496,  0,  496,  0,  496,  0,  2790,  0,
    2852,  0,  2914,  0,  2976,  0,  3038,  0,  496,  0,  496,  0,  3100,  0,  3162,  0,
    3224,  0,  496,  0,  496,  0,  3286,  0,  3348,  0,  3410,  0,  3472,  0,  3534,  0,
    3596,  0,  3658,  0,  3720,  0,  3782,  0,  3844,  0,  3906,  0,  496,  0,  496,  0,
    496,  0,  3968,  0,  4030,  0,  4092,  0,  4154,  0,  4216,  0,  4278,  0,  496,  0,
    4340,  0,  4402,  0,  496,  0,  496,  0,  4464,  0,  4526,  0,  4588,  0,  4650,  0,
    4712,  0,  4774,  0,  496,  0,  4836,  0,  4898,  0,  4960,  0,  496,  0,  496,  0,
    5022,  0,  5084,  0,  5146,  0,  5208,  0,  5270,  0,  5332,  0,  5394,  0,  5456,  0,
    5518,  0,  5580,  0,  5642,  0,  5704,  0,  5766,  0,  5828,  0,  5890,  0,  5952,  0,
    6014,  0,  6076,  0,  6138,  0,  620,  0,  620,  0,  6200,  0,  6262,  0,  6324,  0,
    6386,  0,  620,  0,  620,  0,  620,  0,  6448,  0,  6510,  0,  620,  0,  6572,  0,
    6634,  0,  6696,  0,  6758,  0,  6820,  0,  6882,  0,  6944,  0,  7006,  0,  496,  0,
    496,  0,  496,  0,  496,  0,  7068,  0,  496,  0,  496,  0,  7130,  0,  496,  0,
    7192,  0,  496,  0,  7254,  0,  496,  0,  496,  0,  7316,  0,  496,  0,  496,  0,
    3348,  0,  7378,  0,  496,  0,  496,  0,  7440,  0,  496,  0,  3658,  0,  7502,  0,
    7564,  0,  7626,  0,  7688,  0,  7750,  0,  620,  0,  7812,  0,  7874,  0,  7936,  0,
    7998,  0,  8060,  0,  8122,  0,  8184,  0,  8246,  0,  496,  0,  496,  0,  8308,  0,
    8370,  0,  8432,  0,  8494,  0,  8556,  0,  8618,  0,  8680,  0,  8742,  0,  620,  0,
    8804,  0,  8866,  0,  8928,  0,  8990,  0,  9052,  0,  9114,  0,  620,  0,  9176,  0,
    9238,  0,  9300,  0,  9362,  0,  9424,  0,  9486,  0,  9548,  0,  9610,  0,  9672,  0,
    9734,  0,  9796,  0,  9858,  0,  620,  0,  9920,  0,  9982,  0,  10044,  0,  10106,  0,
    10168,  0,  10230,  0,  10292,  0,  10354,  0,  10416,  0,  620,  0,  10478,  0,  620,  0,
    496,  0,  496,  0,  496,  0,  496,  0,  496,  0,  10540,  0,  10602,  0,  10664,  0,
    10726,  0,  10788,  0,  496,  0,  7936,  0,  496,  0,  10850,  0,  10912,  0,  10974,  0,
    11036,  0,  11098,  0,  11160,  0,  620,  0,  620,  0,  11222,  0,  11284,  0,  11346,  0,
    11408,  0,  11470,  0,  620,  0,  11532,  0,  620,  0,  11594,  0,  620,  0,  11656,  0,
    620,  0,  11718,  0,  11780,  0,  620,  0,  11842,  0,  11904,  0,  11966,  0,  12028,  0,
    12090,  0,  620,  0,  12152,  0,  12214,  0,  12276,  0,  620,  0,  12338,  0,  12400,  0,
    12462,  0,  12524,  0,  12586,  0,  12648,  0,  12710,  0,  620,  0,  620,  0,  620,  0,
    3844,  0,  12772,  0,  620,  0,  12834,  0,  12896,  0,  12958,  0,  13020,  0,  13082,  0,
    13144,  0,  13206,  0,  13268,  0,  13330,  0,  620,  0,  13392,  0,  620,  0,  13454,  0,
    620,  0,  13516,  0,  620,  0,  13578,  0,  620,  0,  620,  0,  620,  0,  620,  0,
    13640,  0,  13702,  0,  13764,  0,  13826,  0,  13888,  0,  13950,  0,  14012,  0,  14074,  0,
    14136,  0,  620,  0,  620,  0,  620,  0,  14198,  0,  14260,  0,  14322,  0,  14384,  0,
    14446,  0,  620,  0,  14508,  0,  14570,  0,  620,  0,  620,  0,  14632,  0,  620,  0,
    620,  0,  14694,  0,  14756,  0,  14818,  0,  14880,  0,  14942,  0,  620,  0,  15004,  0,
    620,  0,  15066,  0,  15128,  0,  620,  0,  620,  0,  496,  0,  620,  0,  15190,  0,
    620,  0,  15252,  0,  620,  0,  15314,  0,  15376,  0,  620,  0,  15438,  0,  15500,  0,
    15562,  0,  620,  0,  620,  0,  620,  0,  620,  0,  15624,  0,  620,  0,  15686,  0,
    620,  0,  620,  0,  15748,  0,  620,
  ];
  // @formatter:on


  static List<int> _zzUnpackRowMap() {
    final result = List<int>(364);
    int offset = 0;
    offset = __zzUnpackRowMap(_ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  static int __zzUnpackRowMap(List<int> packed, int offset, List<int> result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length;
    while (i < l) {
      int high = packed[i++] << 16;
      result[j++] = high | packed[i++];
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  static final _ZZ_TRANS = _zzUnpackTrans();

  static final _ZZ_TRANS_PACKED_0 = <int>[
    1, 9, 1, 10, 2, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 13, 1,
    16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 11, 1, 21, 1, 22, 1,
    11, 1, 23, 1, 24, 1, 25, 2, 11, 1, 26, 1, 27, 1, 28, 1,
    29, 1, 30, 1, 11, 1, 31, 1, 32, 1, 33, 1, 34, 1, 35, 1,
    36, 1, 11, 1, 37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42, 1,
    43, 1, 44, 1, 45, 1, 46, 1, 47, 1, 48, 1, 49, 1, 50, 1,
    51, 1, 52, 1, 53, 1, 54, 1, 55, 1, 56, 1, 57, 1, 58, 1,
    59, 1, 60, 1, 61, 1, 9, 9, 62, 1, 63, 1, 64, 51, 62, 8,
    65, 1, 66, 3, 65, 1, 67, 1, 65, 1, 68, 46, 65, 1, 69, 12,
    70, 1, 71, 1, 70, 1, 68, 46, 70, 1, 72, 8, 73, 1, 66, 4,
    73, 1, 67, 1, 68, 46, 73, 1, 74, 13, 75, 1, 76, 1, 68, 46,
    75, 1, 72, 2, 9, 3, 77, 6, 9, 1, 77, 5, 9, 2, 77, 2,
    9, 2, 77, 1, 9, 2, 77, 1, 78, 16, 77, 20, 9, 1, 10, 2,
    11, 1, 12, 1, 13, 1, 79, 1, 15, 1, 13, 1, 16, 1, 17, 1,
    18, 1, 19, 1, 20, 1, 11, 1, 80, 1, 22, 1, 11, 1, 23, 1,
    24, 1, 25, 2, 11, 1, 81, 1, 27, 1, 28, 1, 29, 1, 30, 1,
    11, 1, 31, 1, 32, 1, 33, 1, 34, 1, 35, 1, 36, 1, 11, 1,
    37, 1, 38, 1, 39, 1, 40, 1, 41, 1, 42, 1, 43, 1, 44, 1,
    45, 1, 46, 1, 47, 1, 48, 1, 49, 1, 50, 1, 51, 1, 52, 1,
    53, 1, 54, 1, 55, 1, 56, 1, 57, 1, 58, 1, 59, 1, 60, 1,
    61, 1, 9, 63, 0, 1, 10, 14, 0, 1, 82, 2, 83, 1, 0, 1,
    10, 42, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1,
    84, 7, 11, 1, 85, 1, 11, 1, 86, 8, 11, 24, 0, 1, 13, 2,
    0, 1, 13, 60, 0, 1, 87, 103, 0, 1, 88, 21, 0, 1, 89, 1,
    90, 38, 0, 1, 91, 61, 0, 1, 92, 13, 0, 4, 11, 6, 0, 1,
    11, 1, 93, 1, 94, 1, 11, 2, 0, 1, 11, 1, 95, 1, 0, 3,
    11, 1, 0, 19, 11, 31, 0, 1, 96, 62, 0, 1, 97, 49, 0, 1,
    98, 14, 0, 1, 99, 3, 0, 1, 98, 42, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 1, 11, 1, 100, 1,
    11, 1, 0, 7, 11, 1, 101, 1, 11, 1, 102, 9, 11, 38, 0, 1,
    103, 29, 0, 1, 104, 13, 0, 1, 10, 14, 0, 1, 82, 2, 83, 1,
    0, 1, 10, 2, 105, 40, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1, 11, 1, 106, 1,
    11, 1, 107, 11, 11, 1, 108, 3, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 109, 1, 0, 3, 11, 1,
    0, 2, 11, 1, 110, 3, 11, 1, 111, 4, 11, 1, 112, 2, 11, 1,
    113, 1, 114, 3, 11, 20, 0, 4, 11, 6, 0, 1, 115, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 6, 11, 1, 116, 7,
    11, 1, 117, 4, 11, 20, 0, 4, 11, 6, 0, 1, 118, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 1, 119, 6, 11, 1, 120, 1, 121, 10, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 10, 11, 1, 122, 8, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 10,
    11, 1, 123, 8, 11, 20, 0, 3, 11, 1, 124, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 9, 11, 1,
    125, 6, 11, 1, 126, 2, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 1, 11, 1, 127, 1, 0, 3, 11, 1, 0, 1,
    128, 10, 11, 1, 129, 7, 11, 20, 0, 3, 11, 1, 130, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1,
    11, 1, 131, 7, 11, 1, 132, 3, 11, 1, 133, 5, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 134, 1,
    0, 3, 11, 1, 0, 8, 11, 1, 135, 10, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 10, 11, 1, 136, 8, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 10, 11, 1,
    137, 8, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 6, 11, 1, 138, 3, 11, 1,
    139, 8, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 1, 140, 18, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 1, 141, 7, 11, 1, 142, 10, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 143, 1, 0, 3,
    11, 1, 0, 19, 11, 67, 0, 1, 144, 1, 145, 61, 0, 1, 146, 2,
    0, 1, 147, 18, 0, 1, 148, 101, 0, 1, 149, 61, 0, 1, 150, 5,
    0, 1, 151, 22, 0, 1, 152, 39, 0, 1, 153, 54, 0, 1, 154, 7,
    0, 1, 155, 53, 0, 1, 156, 61, 0, 1, 157, 9, 0, 1, 158, 12,
    0, 1, 159, 60, 0, 1, 160, 52, 0, 8, 65, 1, 0, 3, 65, 1,
    0, 1, 65, 1, 0, 46, 65, 1, 161, 2, 0, 3, 162, 6, 0, 1,
    162, 3, 0, 1, 163, 1, 0, 2, 162, 2, 0, 2, 162, 1, 0, 19,
    162, 19, 0, 8, 65, 1, 0, 53, 65, 12, 70, 1, 0, 1, 70, 1,
    0, 46, 70, 1, 0, 12, 164, 1, 165, 49, 164, 62, 166, 8, 73, 1,
    0, 4, 73, 2, 0, 46, 73, 1, 167, 8, 73, 1, 0, 53, 73, 13,
    75, 2, 0, 46, 75, 1, 0, 13, 164, 1, 168, 48, 164, 1, 0, 4,
    77, 6, 0, 1, 77, 5, 0, 2, 77, 1, 0, 3, 77, 1, 0, 19,
    77, 20, 0, 4, 77, 6, 0, 1, 77, 5, 0, 2, 77, 1, 0, 3,
    77, 1, 0, 6, 77, 1, 169, 12, 77, 20, 0, 1, 98, 18, 0, 1,
    98, 42, 0, 1, 170, 17, 0, 2, 170, 27, 0, 1, 170, 14, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 5, 11, 1, 171, 1, 11, 1, 172, 11, 11, 20, 0, 4,
    11, 6, 0, 1, 173, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 9, 11, 1, 174, 9,
    11, 19, 0, 8, 87, 1, 0, 61, 87, 1, 0, 1, 175, 52, 87, 10,
    0, 1, 176, 51, 0, 8, 177, 1, 0, 3, 177, 1, 178, 49, 177, 8,
    179, 1, 0, 4, 179, 1, 180, 48, 179, 1, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2,
    11, 1, 181, 16, 11, 31, 0, 1, 182, 62, 0, 1, 183, 49, 0, 1,
    98, 15, 0, 2, 83, 1, 0, 1, 98, 42, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2,
    11, 1, 184, 13, 11, 1, 185, 2, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1,
    11, 1, 186, 17, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 11, 11, 1, 187, 7,
    11, 20, 0, 2, 105, 1, 0, 1, 105, 12, 0, 2, 105, 1, 0, 1,
    105, 3, 0, 1, 105, 2, 0, 1, 105, 1, 0, 1, 105, 6, 0, 1,
    105, 26, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 1, 11, 1, 188, 12, 11, 1, 189, 4,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 1, 11, 1, 190, 17, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 1, 191, 18, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1,
    192, 16, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 1, 193, 18, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 8, 11, 1, 194, 10, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 16,
    11, 1, 195, 2, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 9, 11, 1, 196, 9,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 10, 11, 1, 197, 8, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 11, 11, 1, 198, 2, 11, 1, 199, 4, 11, 20, 0, 4,
    11, 6, 0, 1, 200, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 10, 11, 1, 201, 8, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 16,
    11, 1, 202, 2, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 1, 11, 1, 203, 1, 0, 3, 11, 1, 0, 19, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 1, 11, 1, 204, 1, 205, 16, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 1, 206, 18, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 9, 11, 1,
    207, 7, 11, 1, 208, 1, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 12, 11, 1,
    209, 6, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 3, 11, 1, 210, 15, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1,
    211, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 15,
    11, 1, 212, 3, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1, 213, 16,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 7, 11, 1, 214, 11, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 16, 11, 1, 215, 2, 11, 20, 0, 3, 11, 1, 216, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 1, 11, 1, 217, 1, 11, 1, 0, 19, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1,
    218, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 10,
    11, 1, 219, 8, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1, 220, 16,
    11, 20, 0, 4, 11, 6, 0, 1, 221, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1,
    222, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 10, 11, 1, 223, 8, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 2, 11, 1, 224, 16, 11, 68, 0, 1, 225, 61, 0, 1,
    226, 61, 0, 1, 227, 61, 0, 1, 228, 61, 0, 1, 229, 13, 0, 4,
    162, 6, 0, 1, 162, 5, 0, 2, 162, 1, 0, 3, 162, 1, 0, 19,
    162, 19, 0, 12, 164, 1, 67, 62, 164, 1, 67, 48, 164, 1, 0, 4,
    77, 6, 0, 1, 77, 5, 0, 2, 77, 1, 0, 3, 77, 1, 0, 10,
    77, 1, 230, 8, 77, 20, 0, 1, 170, 18, 0, 1, 170, 42, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 2, 11, 1, 231, 16, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1,
    11, 1, 232, 17, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1, 233, 18, 11, 19,
    0, 8, 234, 1, 0, 1, 87, 52, 234, 9, 0, 1, 235, 1, 236, 51,
    0, 8, 177, 1, 0, 3, 177, 1, 237, 49, 177, 12, 0, 1, 238, 49,
    0, 8, 179, 1, 0, 4, 179, 1, 237, 48, 179, 13, 0, 1, 239, 49,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 6, 11, 1, 240, 4, 11, 1, 241, 7, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1,
    242, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 8,
    11, 1, 243, 10, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 1, 11, 1, 244, 1, 0, 3, 11, 1, 0, 19, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 13, 11, 1, 245, 5, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 246, 1, 0, 3,
    11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 9, 11, 1, 247, 9,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 2, 11, 1, 248, 16, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 10, 11, 1, 249, 8, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2,
    11, 1, 250, 16, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 15, 11, 1, 251, 3,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 1,
    11, 1, 252, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 5, 11, 1, 253, 13, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1,
    254, 16, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 1, 11, 1, 255, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 8, 11, 1, 256, 10, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1,
    11, 1, 257, 17, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 1, 11, 1, 258, 1, 0, 3, 11, 1, 0, 19, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 1, 259, 18, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 260, 1, 0, 3, 11, 1,
    0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 5, 11, 1, 261, 13, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 1, 11, 1, 262, 17, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 1, 11, 1, 263, 1, 264, 16, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1,
    265, 18, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 1, 11, 1, 266, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4,
    11, 6, 0, 1, 267, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 268, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 10, 11, 1, 269, 8, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 7,
    11, 1, 270, 11, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 7, 11, 1, 271, 1,
    272, 10, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 1, 11, 1, 273, 1, 0, 3, 11, 1, 0, 1, 274, 18, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 10, 11, 1, 275, 8, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 7, 11, 1, 276, 11, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 7, 11, 1,
    277, 11, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 6, 11, 1, 278, 12, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 2, 11, 1, 279, 16, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 12, 11, 1, 280, 6, 11, 20, 0, 4, 77, 6, 0, 1, 77, 5,
    0, 2, 77, 1, 0, 3, 77, 1, 0, 1, 77, 1, 281, 17, 77, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 8, 11, 1, 282, 10, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 283, 1, 0, 3,
    11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 7, 11, 1, 284, 11,
    11, 19, 0, 8, 234, 1, 0, 53, 234, 12, 238, 1, 285, 49, 238, 13,
    239, 1, 286, 48, 239, 1, 0, 4, 11, 6, 0, 1, 287, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4,
    11, 6, 0, 1, 288, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 289, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 9, 11, 1, 290, 9,
    11, 20, 0, 4, 11, 6, 0, 1, 291, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1,
    292, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 5, 11, 1, 293, 13, 11, 20, 0, 4,
    11, 6, 0, 1, 294, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1, 295, 16,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 10, 11, 1, 296, 8, 11, 20, 0, 4,
    11, 6, 0, 1, 297, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 5, 11, 1, 298, 13,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 15, 11, 1, 299, 3, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 12, 11, 1, 300, 6, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 4,
    11, 1, 301, 14, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 6, 11, 1, 302, 12,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 1, 11, 1, 303, 17, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 2, 11, 1, 304, 16, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 10,
    11, 1, 305, 8, 11, 20, 0, 4, 11, 6, 0, 1, 306, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 1, 307, 18, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1, 308, 18,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 17, 11, 1, 309, 1, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 310, 1,
    0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 311, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19, 11, 20,
    0, 4, 11, 6, 0, 1, 312, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 11, 11, 1,
    313, 7, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 9, 11, 1, 314, 9, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 12, 11, 1, 315, 6, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 316, 1, 0, 3,
    11, 1, 0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 317, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 7, 11, 1, 318, 11, 11, 19, 0, 12, 238, 1, 319, 49,
    238, 13, 239, 1, 320, 48, 239, 1, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 8, 11, 1,
    321, 10, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 9, 11, 1, 322, 9, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 9, 11, 1, 323, 9, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 12, 11, 1, 324, 6, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1,
    325, 16, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1, 326, 16, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 1, 327, 18, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 5,
    11, 1, 328, 13, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 6, 11, 1, 329, 12,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 1,
    11, 1, 330, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 9, 11, 1, 331, 9, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 10, 11, 1,
    332, 8, 11, 20, 0, 4, 11, 6, 0, 1, 333, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 2, 11, 1, 334, 16, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 1, 11, 1, 335, 1, 0, 3, 11, 1, 0, 19,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 13, 11, 1, 336, 5, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 2, 11, 1, 337, 16, 11, 20, 0, 4, 11, 6, 0, 1,
    338, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 7, 11, 1, 339, 11, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 14, 11, 1, 340, 4, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 14,
    11, 1, 341, 4, 11, 19, 0, 12, 238, 1, 342, 49, 238, 13, 239, 1,
    342, 48, 239, 1, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 15, 11, 1, 343, 3, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 1, 344, 18, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1,
    11, 1, 345, 17, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 5, 11, 1, 346, 13,
    11, 20, 0, 3, 11, 1, 347, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 11, 11, 1, 348, 7, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 1, 349, 18,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2,
    11, 1, 0, 3, 11, 1, 0, 14, 11, 1, 350, 4, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 8, 11, 1, 351, 10, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 1, 11, 1, 352, 1, 0, 3, 11, 1,
    0, 19, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 1, 11, 1, 353, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4,
    11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3,
    11, 1, 0, 2, 11, 1, 354, 16, 11, 20, 0, 4, 11, 6, 0, 1,
    11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 7,
    11, 1, 355, 11, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1,
    11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1, 356, 16,
    11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 1,
    11, 1, 357, 1, 0, 3, 11, 1, 0, 19, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 9, 11, 1, 358, 9, 11, 20, 0, 4, 11, 6, 0, 1, 359, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 19, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 9, 11, 1, 360, 9, 11, 20, 0, 4, 11, 6,
    0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1,
    0, 12, 11, 1, 361, 6, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2,
    0, 1, 11, 2, 0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1,
    362, 16, 11, 20, 0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2,
    0, 2, 11, 1, 0, 3, 11, 1, 0, 2, 11, 1, 363, 16, 11, 20,
    0, 4, 11, 6, 0, 1, 11, 2, 0, 1, 11, 2, 0, 2, 11, 1,
    0, 3, 11, 1, 0, 1, 11, 1, 364, 17, 11, 19, 0,
  ];

  static List<int> _zzUnpackTrans() {
    final result = List<int>(15810);
    int offset = 0;
    offset = __zzUnpackTrans(_ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  static int __zzUnpackTrans(List<int> packed, int offset, List<int> result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length;
    while (i < l) {
      int count = packed[i++];
      int value = packed[i++];
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /* error codes */
  static final int _ZZ_UNKNOWN_ERROR = 0;
  static final int _ZZ_NO_MATCH = 1;
  static final int _ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  static final _ZZ_ERROR_MSG = <String>[
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  ];

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  static final _ZZ_ATTRIBUTE = _zzUnpackAttribute();

  static final _ZZ_ATTRIBUTE_PACKED_0 = <int>[
    2, 0, 4, 1, 2, 0, 1, 9, 11, 1, 1, 9, 4, 1, 1, 9, 17,
    1, 5, 9, 4, 1, 3, 9, 5, 1, 2, 9, 3, 1, 2, 9, 11,
    1, 3, 9, 1, 0, 5, 1, 1, 9, 2, 1, 2, 9, 3, 1, 2,
    0, 1, 1, 1, 9, 3, 1, 2, 9, 39, 1, 4, 9, 1, 1, 2,
    9, 1, 1, 1, 9, 1, 1, 1, 9, 1, 1, 2, 9, 1, 1, 2,
    9, 1, 0, 1, 1, 2, 9, 1, 0, 1, 9, 2, 0, 13, 1, 2,
    9, 41, 1, 5, 9, 5, 1, 1, 9, 1, 0, 1, 9, 47, 1, 2,
    0, 32, 1, 2, 0, 21, 1, 1, 9, 22, 1,
  ];

  static List<int> _zzUnpackAttribute() {
    final result = List<int>(364);
    int offset = 0;
    offset = __zzUnpackAttribute(_ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  static int __zzUnpackAttribute(List<int> packed, int offset,
      List<int> result) {
    int i = 0; /* index in packed string  */
    int j = offset; /* index in unpacked array */
    int l = packed.length;
    while (i < l) {
      int count = packed[i++];
      int value = packed[i++];
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  LexerReader _zzReader;

  /** the current state of the DFA */
  int _zzState = 0;

  /** the current lexical state */
  int _zzLexicalState = STATE_YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  var _zzBuffer = List<int>(ZZ_BUFFERSIZE);

  /** the text position at the last accepting state */
  int _zzMarkedPos = 0;

  /** the current text position in the buffer */
  int _zzCurrentPos = 0;

  /** startRead marks the beginning of the yytext string in the buffer */
  int _zzStartRead = 0;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  int _zzEndRead = 0;

  /** number of newlines encountered up to the start of the matched text */
  int _yyline;

  /** the number of characters up to the start of the matched text */
  int _yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  int _yycolumn;

  /** zzAtEOF == true iff the scanner is at the EOF */
  bool _zzAtEOF = false;

  /** denotes if the user-EOF-code has already been executed */
  bool _zzEOFDone = false;

  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  static List<int> _zzUnpackCMap(List<int> packed) {
    final map = List<int>(0x110000);
    int i = 0; /* index in packed string  */
    int j = 0; /* index in unpacked array */
    while (i < 180) {
      int count = packed[i++];
      int value = packed[i++];
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  final _myStateStack = Queue<State>();
  int _myLeftBraceCount;

  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  DartLexer(LexerReader reader) {
    _zzReader = reader;
  }

  void _pushState(int state) {
    _myStateStack.addLast(State(_yyState, _myLeftBraceCount));
    _myLeftBraceCount = 0;
    _yyBegin(state);
  }

  void _popState() {
    State state = _myStateStack.removeLast();
    _myLeftBraceCount = state.lBraceCount;
    _yyBegin(state.state);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  bool _zzRefill() {
    /* first: make room (if you can) */
    if (_zzStartRead > 0) {
      for (int i = 0, j = _zzStartRead;
      i < (_zzEndRead - _zzStartRead);
      i++, j++) {
        _zzBuffer[i] = _zzBuffer[j];
      }

      /* translate stored positions */
      _zzEndRead -= _zzStartRead;
      _zzCurrentPos -= _zzStartRead;
      _zzMarkedPos -= _zzStartRead;
      _zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (_zzCurrentPos >= _zzBuffer.length) {
      /* if not: blow it up */
      final newBuffer = List<int>(_zzBuffer.length * 2);
      for (int i = 0; i < _zzBuffer.length; i++) {
        newBuffer[i] = _zzBuffer[i];
      }
      _zzBuffer = newBuffer;
    }

    /* fill the buffer with new input */
    int requested = _zzBuffer.length - _zzEndRead;
    int numRead = _zzReader.read(_zzBuffer, _zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw StateError(
          "Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      _zzEndRead += numRead;
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

  /**
   * Closes the input stream.
   */
  void yyClose() {
    _zzAtEOF = true; /* indicate end of file */
    _zzEndRead = _zzStartRead; /* invalidate buffer    */

    if (_zzReader != null) {
      _zzReader.close();
    }
  }

  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  void yyReset(LexerReader reader) {
    _zzReader = reader;
    _zzAtEOF = false;
    _zzEOFDone = false;
    _zzEndRead = _zzStartRead = 0;
    _zzCurrentPos = _zzMarkedPos = 0;
    _yyline = _yychar = _yycolumn = 0;
    _zzLexicalState = STATE_YYINITIAL;
    if (_zzBuffer.length > ZZ_BUFFERSIZE) {
      _zzBuffer = List<int>(ZZ_BUFFERSIZE);
    }
  }

  /**
   * Returns the current lexical state.
   */
  int get _yyState => _zzLexicalState;

  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  void _yyBegin(int newState) {
    _zzLexicalState = newState;
  }

  /**
   * Returns the text matched by the current regular expression.
   */
  String get yyText => String.fromCharCodes(_zzBuffer, _zzStartRead, yyLength);

  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  int _yyCharAt(int pos) => _zzBuffer[_zzStartRead + pos];

  int get yyStart => _zzStartRead;

  /**
   * Returns the length of the matched text region.
   */
  int get yyLength => _zzMarkedPos - _zzStartRead;

  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  void _zzScanError(int errorCode) {
    String message;
    try {
      message = _ZZ_ERROR_MSG[errorCode];
    } on IndexError {
      message = _ZZ_ERROR_MSG[_ZZ_UNKNOWN_ERROR];
    }
    throw StateError(message);
  }

  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  void _yyPushBack(int number) {
    if (number > yyLength) {
      _zzScanError(_ZZ_PUSHBACK_2BIG);
    }
    _zzMarkedPos -= number;
  }

  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  void _zzDoEOF() {
    if (!_zzEOFDone) {
      _zzEOFDone = true;
      _myLeftBraceCount = 0;
      _myStateStack.clear();
    }
  }

  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  DartElementType advance() {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = _zzEndRead;
    var zzBufferL = _zzBuffer;
    final zzCMapL = _ZZ_CMAP;
    final zzTransL = _ZZ_TRANS;
    final zzRowMapL = _ZZ_ROWMAP;
    final zzAttrL = _ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = _zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = _zzCurrentPos = _zzStartRead = zzMarkedPosL;

      _zzState = _ZZ_LEXSTATE[_zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[_zzState];
      if ((zzAttributes & 1) == 1) {
        zzAction = _zzState;
      }

      zzForAction:
      {
        while (true) {
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = zzBufferL[zzCurrentPosL];
            zzCurrentPosL++;
          } else if (_zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          } else {
            // store back cached positions
            _zzCurrentPos = zzCurrentPosL;
            _zzMarkedPos = zzMarkedPosL;
            bool eof = _zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL = _zzCurrentPos;
            zzMarkedPosL = _zzMarkedPos;
            zzBufferL = _zzBuffer;
            zzEndReadL = _zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            } else {
              zzInput = zzBufferL[zzCurrentPosL];
              zzCurrentPosL++;
            }
          }
          int zzNext = zzTransL[zzRowMapL[_zzState] + zzCMapL[zzInput]];
          if (zzNext == -1) break zzForAction;
          _zzState = zzNext;

          zzAttributes = zzAttrL[_zzState];
          if ((zzAttributes & 1) == 1) {
            zzAction = _zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ((zzAttributes & 8) == 8) break zzForAction;
          }
        }
      }

      // store back cached position
      _zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && _zzStartRead == _zzCurrentPos) {
        _zzAtEOF = true;
        _zzDoEOF();
        return null;
      } else {
        switch (zzAction < 0 ? zzAction : _ZZ_ACTION[zzAction]) {
          case 1:
            {
              return REGULAR_STRING_PART;
            }
        // fall through
          case 141:
            break;
          case 2:
            {
              return BAD_CHARACTER;
            }
        // fall through
          case 142:
            break;
          case 3:
            {
              return NUMBER;
            }
        // fall through
          case 143:
            break;
          case 4:
            {
              return IDENTIFIER;
            }
        // fall through
          case 144:
            break;
          case 5:
            {
              return WHITE_SPACE;
            }
        // fall through
          case 145:
            break;
          case 6:
            {
              return HASH;
            }
        // fall through
          case 146:
            break;
          case 7:
            {
              return NOT;
            }
        // fall through
          case 147:
            break;
          case 8:
            {
              return DIV;
            }
        // fall through
          case 148:
            break;
          case 9:
            {
              return MUL;
            }
        // fall through
          case 149:
            break;
          case 10:
            {
              _pushState(STATE_QUO_STRING);
              return OPEN_QUOTE;
            }
        // fall through
          case 150:
            break;
          case 11:
            {
              _pushState(STATE_APOS_STRING);
              return OPEN_QUOTE;
            }
        // fall through
          case 151:
            break;
          case 12:
            {
              return LBRACE;
            }
        // fall through
          case 152:
            break;
          case 13:
            {
              return DOT;
            }
        // fall through
          case 153:
            break;
          case 14:
            {
              return PLUS;
            }
        // fall through
          case 154:
            break;
          case 15:
            {
              return RBRACE;
            }
        // fall through
          case 155:
            break;
          case 16:
            {
              return LBRACKET;
            }
        // fall through
          case 156:
            break;
          case 17:
            {
              return RBRACKET;
            }
        // fall through
          case 157:
            break;
          case 18:
            {
              return LPAREN;
            }
        // fall through
          case 158:
            break;
          case 19:
            {
              return RPAREN;
            }
        // fall through
          case 159:
            break;
          case 20:
            {
              return SEMICOLON;
            }
        // fall through
          case 160:
            break;
          case 21:
            {
              return MINUS;
            }
        // fall through
          case 161:
            break;
          case 22:
            {
              return EQ;
            }
        // fall through
          case 162:
            break;
          case 23:
            {
              return BIN_NOT;
            }
        // fall through
          case 163:
            break;
          case 24:
            {
              return REM;
            }
        // fall through
          case 164:
            break;
          case 25:
            {
              return GT;
            }
        // fall through
          case 165:
            break;
          case 26:
            {
              return COMMA;
            }
        // fall through
          case 166:
            break;
          case 27:
            {
              return COLON;
            }
        // fall through
          case 167:
            break;
          case 28:
            {
              return LT;
            }
        // fall through
          case 168:
            break;
          case 29:
            {
              return QUEST;
            }
        // fall through
          case 169:
            break;
          case 30:
            {
              return OR;
            }
        // fall through
          case 170:
            break;
          case 31:
            {
              return XOR;
            }
        // fall through
          case 171:
            break;
          case 32:
            {
              return AND;
            }
        // fall through
          case 172:
            break;
          case 33:
            {
              return AT;
            }
        // fall through
          case 173:
            break;
          case 34:
            {
              return MULTI_LINE_COMMENT_BODY;
            }
        // fall through
          case 174:
            break;
          case 35:
            {
              _popState();
              return WHITE_SPACE;
            }
        // fall through
          case 175:
            break;
          case 36:
            {
              _popState();
              return CLOSING_QUOTE;
            }
        // fall through
          case 176:
            break;
          case 37:
            {
              return SHORT_TEMPLATE_ENTRY_START;
            }
        // fall through
          case 177:
            break;
          case 38:
            {
              _popState();
              return IDENTIFIER;
            }
        // fall through
          case 178:
            break;
          case 39:
            {
              _myLeftBraceCount++;
              return LBRACE;
            }
        // fall through
          case 179:
            break;
          case 40:
            {
              if (_myLeftBraceCount == 0) {
                _popState();
                return LONG_TEMPLATE_ENTRY_END;
              }
              _myLeftBraceCount--;
              return RBRACE;
            }
        // fall through
          case 180:
            break;
          case 41:
            {
              return SINGLE_LINE_COMMENT;
            }
        // fall through
          case 181:
            break;
          case 42:
            {
              return NEQ;
            }
        // fall through
          case 182:
            break;
          case 43:
            {
              _pushState(STATE_MULTI_LINE_COMMENT_STATE);
              return MULTI_LINE_COMMENT_START;
            }
        // fall through
          case 183:
            break;
          case 44:
            {
              return DIV_EQ;
            }
        // fall through
          case 184:
            break;
          case 45:
            {
              return MUL_EQ;
            }
        // fall through
          case 185:
            break;
          case 46:
            {
              return RAW_SINGLE_QUOTED_STRING;
            }
        // fall through
          case 186:
            break;
          case 47:
            {
              return DOT_DOT;
            }
        // fall through
          case 187:
            break;
          case 48:
            {
              return PLUS_PLUS;
            }
        // fall through
          case 188:
            break;
          case 49:
            {
              return PLUS_EQ;
            }
        // fall through
          case 189:
            break;
          case 50:
            {
              return AS;
            }
        // fall through
          case 190:
            break;
          case 51:
            {
              return OF;
            }
        // fall through
          case 191:
            break;
          case 52:
            {
              return ON;
            }
        // fall through
          case 192:
            break;
          case 53:
            {
              return IF;
            }
        // fall through
          case 193:
            break;
          case 54:
            {
              return IS;
            }
        // fall through
          case 194:
            break;
          case 55:
            {
              return IN;
            }
        // fall through
          case 195:
            break;
          case 56:
            {
              return DO;
            }
        // fall through
          case 196:
            break;
          case 57:
            {
              return MINUS_MINUS;
            }
        // fall through
          case 197:
            break;
          case 58:
            {
              return MINUS_EQ;
            }
        // fall through
          case 198:
            break;
          case 59:
            {
              return EQ_EQ;
            }
        // fall through
          case 199:
            break;
          case 60:
            {
              return EXPRESSION_BODY_DEF;
            }
        // fall through
          case 200:
            break;
          case 61:
            {
              return INT_DIV;
            }
        // fall through
          case 201:
            break;
          case 62:
            {
              return REM_EQ;
            }
        // fall through
          case 202:
            break;
          case 63:
            {
              return LT_EQ;
            }
        // fall through
          case 203:
            break;
          case 64:
            {
              return LT_LT;
            }
        // fall through
          case 204:
            break;
          case 65:
            {
              return QUEST_DOT;
            }
        // fall through
          case 205:
            break;
          case 66:
            {
              return QUEST_QUEST;
            }
        // fall through
          case 206:
            break;
          case 67:
            {
              return OR_EQ;
            }
        // fall through
          case 207:
            break;
          case 68:
            {
              return OR_OR;
            }
        // fall through
          case 208:
            break;
          case 69:
            {
              return XOR_EQ;
            }
        // fall through
          case 209:
            break;
          case 70:
            {
              return AND_EQ;
            }
        // fall through
          case 210:
            break;
          case 71:
            {
              return AND_AND;
            }
        // fall through
          case 211:
            break;
          case 72:
            {
              _pushState(STATE_MULTI_LINE_COMMENT_STATE);
              return MULTI_LINE_COMMENT_BODY;
            }
        // fall through
          case 212:
            break;
          case 73:
            {
              _popState();
              return _yyState == STATE_MULTI_LINE_COMMENT_STATE
                  ? MULTI_LINE_COMMENT_BODY // inner comment closed
                  : MULTI_LINE_COMMENT_END;
            }
        // fall through
          case 213:
            break;
          case 74:
            {
              _pushState(STATE_SHORT_TEMPLATE_ENTRY);
              _yyPushBack(yyLength - 1);
              return SHORT_TEMPLATE_ENTRY_START;
            }
        // fall through
          case 214:
            break;
          case 75:
            {
              _pushState(STATE_LONG_TEMPLATE_ENTRY);
              return LONG_TEMPLATE_ENTRY_START;
            }
        // fall through
          case 215:
            break;
          case 76:
            {
              _yyPushBack(1);
              return REGULAR_STRING_PART;
            }
        // fall through
          case 216:
            break;
          case 77:
            {
              return FOR;
            }
        // fall through
          case 217:
            break;
          case 78:
            {
              return SINGLE_LINE_DOC_COMMENT;
            }
        // fall through
          case 218:
            break;
          case 79:
            {
              _pushState(STATE_MULTI_LINE_COMMENT_STATE);
              return MULTI_LINE_DOC_COMMENT_START;
            }
        // fall through
          case 219:
            break;
          case 80:
            {
              _pushState(STATE_THREE_QUO_STRING);
              return OPEN_QUOTE;
            }
        // fall through
          case 220:
            break;
          case 81:
            {
              _pushState(STATE_THREE_APOS_STRING);
              return OPEN_QUOTE;
            }
        // fall through
          case 221:
            break;
          case 82:
            {
              return SET;
            }
        // fall through
          case 222:
            break;
          case 83:
            {
              return TRY;
            }
        // fall through
          case 223:
            break;
          case 84:
            {
              return NEW;
            }
        // fall through
          case 224:
            break;
          case 85:
            {
              return VAR;
            }
        // fall through
          case 225:
            break;
          case 86:
            {
              return GET;
            }
        // fall through
          case 226:
            break;
          case 87:
            {
              return INT_DIV_EQ;
            }
        // fall through
          case 227:
            break;
          case 88:
            {
              return LT_LT_EQ;
            }
        // fall through
          case 228:
            break;
          case 89:
            {
              return QUEST_QUEST_EQ;
            }
        // fall through
          case 229:
            break;
          case 90:
            {
              return OR_OR_EQ;
            }
        // fall through
          case 230:
            break;
          case 91:
            {
              return AND_AND_EQ;
            }
        // fall through
          case 231:
            break;
          case 92:
            {
              return MULTI_LINE_COMMENT;
            }
        // fall through
          case 232:
            break;
          case 93:
            {
              return RAW_TRIPLE_QUOTED_STRING;
            }
        // fall through
          case 233:
            break;
          case 94:
            {
              return ELSE;
            }
        // fall through
          case 234:
            break;
          case 95:
            {
              return ENUM;
            }
        // fall through
          case 235:
            break;
          case 96:
            {
              return SHOW;
            }
        // fall through
          case 236:
            break;
          case 97:
            {
              return SYNC;
            }
        // fall through
          case 237:
            break;
          case 98:
            {
              return TRUE;
            }
        // fall through
          case 238:
            break;
          case 99:
            {
              return THIS;
            }
        // fall through
          case 239:
            break;
          case 100:
            {
              return CASE;
            }
        // fall through
          case 240:
            break;
          case 101:
            {
              return HIDE;
            }
        // fall through
          case 241:
            break;
          case 102:
            {
              return NULL;
            }
        // fall through
          case 242:
            break;
          case 103:
            {
              return WITH;
            }
        // fall through
          case 243:
            break;
          case 104:
            {
              return PART;
            }
        // fall through
          case 244:
            break;
          case 105:
            {
              return VOID;
            }
        // fall through
          case 245:
            break;
          case 106:
            {
              _popState();
              return THIS;
            }
        // fall through
          case 246:
            break;
          case 107:
            {
              return FALSE;
            }
        // fall through
          case 247:
            break;
          case 108:
            {
              return FINAL;
            }
        // fall through
          case 248:
            break;
          case 109:
            {
              return ASYNC;
            }
        // fall through
          case 249:
            break;
          case 110:
            {
              return AWAIT;
            }
        // fall through
          case 250:
            break;
          case 111:
            {
              return SUPER;
            }
        // fall through
          case 251:
            break;
          case 112:
            {
              return THROW;
            }
        // fall through
          case 252:
            break;
          case 113:
            {
              return BREAK;
            }
        // fall through
          case 253:
            break;
          case 114:
            {
              return CATCH;
            }
        // fall through
          case 254:
            break;
          case 115:
            {
              return CLASS;
            }
        // fall through
          case 255:
            break;
          case 116:
            {
              return CONST;
            }
        // fall through
          case 256:
            break;
          case 117:
            {
              return MIXIN;
            }
        // fall through
          case 257:
            break;
          case 118:
            {
              return YIELD;
            }
        // fall through
          case 258:
            break;
          case 119:
            {
              return WHILE;
            }
        // fall through
          case 259:
            break;
          case 120:
            {
              return RETURN;
            }
        // fall through
          case 260:
            break;
          case 121:
            {
              return EXPORT;
            }
        // fall through
          case 261:
            break;
          case 122:
            {
              return ASSERT;
            }
        // fall through
          case 262:
            break;
          case 123:
            {
              return STATIC;
            }
        // fall through
          case 263:
            break;
          case 124:
            {
              return SWITCH;
            }
        // fall through
          case 264:
            break;
          case 125:
            {
              return NATIVE;
            }
        // fall through
          case 265:
            break;
          case 126:
            {
              return IMPORT;
            }
        // fall through
          case 266:
            break;
          case 127:
            {
              return FACTORY;
            }
        // fall through
          case 267:
            break;
          case 128:
            {
              return FINALLY;
            }
        // fall through
          case 268:
            break;
          case 129:
            {
              return RETHROW;
            }
        // fall through
          case 269:
            break;
          case 130:
            {
              return EXTENDS;
            }
        // fall through
          case 270:
            break;
          case 131:
            {
              return TYPEDEF;
            }
        // fall through
          case 271:
            break;
          case 132:
            {
              return LIBRARY;
            }
        // fall through
          case 272:
            break;
          case 133:
            {
              return DEFAULT;
            }
        // fall through
          case 273:
            break;
          case 134:
            {
              return EXTERNAL;
            }
        // fall through
          case 274:
            break;
          case 135:
            {
              return ABSTRACT;
            }
        // fall through
          case 275:
            break;
          case 136:
            {
              return CONTINUE;
            }
        // fall through
          case 276:
            break;
          case 137:
            {
              return OPERATOR;
            }
        // fall through
          case 277:
            break;
          case 138:
            {
              return DEFERRED;
            }
        // fall through
          case 278:
            break;
          case 139:
            {
              return COVARIANT;
            }
        // fall through
          case 279:
            break;
          case 140:
            {
              return IMPLEMENTS;
            }
        // fall through
          case 280:
            break;
          default:
            _zzScanError(_ZZ_NO_MATCH);
        }
      }
    }
  }

  /**
   * Token type for a sequence of whitespace characters.
   */
  static const WHITE_SPACE = DartElementType._("WHITE_SPACE");

  /**
   * Token type for a character which is not valid in the position where it was encountered,
   * according to the language grammar.
   */
  static const BAD_CHARACTER = DartElementType._("BAD_CHARACTER");

  /**
   * Internal token type used by the code formatter.
   */
  static const NEW_LINE_INDENT = DartElementType._("NEW_LINE_INDENT");

  // can't appear in PSI because merged into MULTI_LINE_COMMENT
  static const MULTI_LINE_COMMENT_START =
  DartElementType._("MULTI_LINE_COMMENT_START");

  static const MULTI_LINE_DOC_COMMENT_START =
  DartElementType._("MULTI_LINE_DOC_COMMENT_START");
  static const MULTI_LINE_COMMENT_BODY =
  DartElementType._("MULTI_LINE_COMMENT_BODY");
  static const MULTI_LINE_COMMENT_END =
  DartElementType._("MULTI_LINE_COMMENT_END");

  static const SINGLE_LINE_COMMENT = DartElementType._("SINGLE_LINE_COMMENT");
  static const SINGLE_LINE_DOC_COMMENT =
  DartElementType._("SINGLE_LINE_DOC_COMMENT");
  static const MULTI_LINE_COMMENT = DartElementType._("MULTI_LINE_COMMENT");

  static const ADDITIVE_EXPRESSION = DartElementType._("ADDITIVE_EXPRESSION");
  static const ADDITIVE_OPERATOR = DartElementType._("ADDITIVE_OPERATOR");
  static const ARGUMENTS = DartElementType._("ARGUMENTS");
  static const ARGUMENT_LIST = DartElementType._("ARGUMENT_LIST");
  static const ARRAY_ACCESS_EXPRESSION =
  DartElementType._("ARRAY_ACCESS_EXPRESSION");
  static const ASSERT_STATEMENT = DartElementType._("ASSERT_STATEMENT");
  static const ASSIGNMENT_OPERATOR = DartElementType._("ASSIGNMENT_OPERATOR");
  static const ASSIGN_EXPRESSION = DartElementType._("ASSIGN_EXPRESSION");
  static const AS_EXPRESSION = DartElementType._("AS_EXPRESSION");
  static const AWAIT_EXPRESSION = DartElementType._("AWAIT_EXPRESSION");
  static const BITWISE_EXPRESSION = DartElementType._("BITWISE_EXPRESSION");
  static const BITWISE_OPERATOR = DartElementType._("BITWISE_OPERATOR");
  static const BLOCK = DartElementType._("BLOCK");
  static const BREAK_STATEMENT = DartElementType._("BREAK_STATEMENT");
  static const CALL_EXPRESSION = DartElementType._("CALL_EXPRESSION");
  static const CASCADE_REFERENCE_EXPRESSION =
  DartElementType._("CASCADE_REFERENCE_EXPRESSION");
  static const CATCH_PART = DartElementType._("CATCH_PART");
  static const CLASS_BODY = DartElementType._("CLASS_BODY");
  static const CLASS_DEFINITION = DartElementType._("CLASS_DEFINITION");
  static const CLASS_MEMBERS = DartElementType._("CLASS_MEMBERS");
  static const COMPARE_EXPRESSION = DartElementType._("COMPARE_EXPRESSION");
  static const COMPONENT_NAME = DartElementType._("COMPONENT_NAME");
  static const CONTINUE_STATEMENT = DartElementType._("CONTINUE_STATEMENT");
  static const DEFAULT_CASE = DartElementType._("DEFAULT_CASE");
  static const DEFAULT_FORMAL_NAMED_PARAMETER =
  DartElementType._("DEFAULT_FORMAL_NAMED_PARAMETER");
  static const DO_WHILE_STATEMENT = DartElementType._("DO_WHILE_STATEMENT");
  static const ENUM_CONSTANT_DECLARATION =
  DartElementType._("ENUM_CONSTANT_DECLARATION");
  static const ENUM_DEFINITION = DartElementType._("ENUM_DEFINITION");
  static const EQUALITY_OPERATOR = DartElementType._("EQUALITY_OPERATOR");
  static const EXPORT_STATEMENT = DartElementType._("EXPORT_STATEMENT");
  static const EXPRESSION = DartElementType._("EXPRESSION");
  static const EXPRESSION_LIST = DartElementType._("EXPRESSION_LIST");
  static const FACTORY_CONSTRUCTOR_DECLARATION =
  DartElementType._("FACTORY_CONSTRUCTOR_DECLARATION");
  static const FIELD_FORMAL_PARAMETER =
  DartElementType._("FIELD_FORMAL_PARAMETER");
  static const FIELD_INITIALIZER = DartElementType._("FIELD_INITIALIZER");
  static const FINALLY_PART = DartElementType._("FINALLY_PART");
  static const FORMAL_PARAMETER_LIST =
  DartElementType._("FORMAL_PARAMETER_LIST");
  static const FOR_IN_PART = DartElementType._("FOR_IN_PART");
  static const FOR_LOOP_PARTS = DartElementType._("FOR_LOOP_PARTS");
  static const FOR_LOOP_PARTS_IN_BRACES =
  DartElementType._("FOR_LOOP_PARTS_IN_BRACES");
  static const FOR_STATEMENT = DartElementType._("FOR_STATEMENT");
  static const FUNCTION_BODY = DartElementType._("FUNCTION_BODY");
  static const FUNCTION_DECLARATION_WITH_BODY =
  DartElementType._("FUNCTION_DECLARATION_WITH_BODY");
  static const FUNCTION_DECLARATION_WITH_BODY_OR_NATIVE =
  DartElementType._("FUNCTION_DECLARATION_WITH_BODY_OR_NATIVE");
  static const FUNCTION_EXPRESSION = DartElementType._("FUNCTION_EXPRESSION");
  static const FUNCTION_EXPRESSION_BODY =
  DartElementType._("FUNCTION_EXPRESSION_BODY");
  static const FUNCTION_FORMAL_PARAMETER =
  DartElementType._("FUNCTION_FORMAL_PARAMETER");
  static const FUNCTION_TYPE_ALIAS = DartElementType._("FUNCTION_TYPE_ALIAS");
  static const GETTER_DECLARATION = DartElementType._("GETTER_DECLARATION");
  static const HIDE_COMBINATOR = DartElementType._("HIDE_COMBINATOR");
  static const ID = DartElementType._("ID");
  static const IF_NULL_EXPRESSION = DartElementType._("IF_NULL_EXPRESSION");
  static const IF_STATEMENT = DartElementType._("IF_STATEMENT");
  static const IMPORT_STATEMENT = DartElementType._("IMPORT_STATEMENT");
  static const INCOMPLETE_DECLARATION =
  DartElementType._("INCOMPLETE_DECLARATION");
  static const INITIALIZERS = DartElementType._("INITIALIZERS");
  static const INTERFACES = DartElementType._("INTERFACES");
  static const IS_EXPRESSION = DartElementType._("IS_EXPRESSION");
  static const LABEL = DartElementType._("LABEL");
  static const LIBRARY_COMPONENT_REFERENCE_EXPRESSION =
  DartElementType._("LIBRARY_COMPONENT_REFERENCE_EXPRESSION");
  static const LIBRARY_ID = DartElementType._("LIBRARY_ID");
  static const LIBRARY_NAME_ELEMENT = DartElementType._("LIBRARY_NAME_ELEMENT");
  static const LIBRARY_REFERENCE_LIST =
  DartElementType._("LIBRARY_REFERENCE_LIST");
  static const LIBRARY_STATEMENT = DartElementType._("LIBRARY_STATEMENT");
  static const LIST_LITERAL_EXPRESSION =
  DartElementType._("LIST_LITERAL_EXPRESSION");
  static const LITERAL_EXPRESSION = DartElementType._("LITERAL_EXPRESSION");
  static const LOGIC_AND_EXPRESSION = DartElementType._("LOGIC_AND_EXPRESSION");
  static const LOGIC_OR_EXPRESSION = DartElementType._("LOGIC_OR_EXPRESSION");
  static const LONG_TEMPLATE_ENTRY = DartElementType._("LONG_TEMPLATE_ENTRY");
  static const MAP_LITERAL_ENTRY = DartElementType._("MAP_LITERAL_ENTRY");
  static const MAP_LITERAL_EXPRESSION =
  DartElementType._("MAP_LITERAL_EXPRESSION");
  static const METADATA = DartElementType._("METADATA");
  static const METHOD_DECLARATION = DartElementType._("METHOD_DECLARATION");
  static const MIXINS = DartElementType._("MIXINS");
  static const MIXIN_APPLICATION = DartElementType._("MIXIN_APPLICATION");
  static const MIXIN_DECLARATION = DartElementType._("MIXIN_DECLARATION");
  static const MULTIPLICATIVE_EXPRESSION =
  DartElementType._("MULTIPLICATIVE_EXPRESSION");
  static const MULTIPLICATIVE_OPERATOR =
  DartElementType._("MULTIPLICATIVE_OPERATOR");
  static const NAMED_ARGUMENT = DartElementType._("NAMED_ARGUMENT");
  static const NAMED_CONSTRUCTOR_DECLARATION =
  DartElementType._("NAMED_CONSTRUCTOR_DECLARATION");
  static const NEW_EXPRESSION = DartElementType._("NEW_EXPRESSION");
  static const NORMAL_FORMAL_PARAMETER =
  DartElementType._("NORMAL_FORMAL_PARAMETER");
  static const NORMAL_PARAMETER_TYPE =
  DartElementType._("NORMAL_PARAMETER_TYPE");
  static const ON_MIXINS = DartElementType._("ON_MIXINS");
  static const ON_PART = DartElementType._("ON_PART");
  static const OPTIONAL_FORMAL_PARAMETERS =
  DartElementType._("OPTIONAL_FORMAL_PARAMETERS");
  static const OPTIONAL_PARAMETER_TYPES =
  DartElementType._("OPTIONAL_PARAMETER_TYPES");
  static const PARAMETER_NAME_REFERENCE_EXPRESSION =
  DartElementType._("PARAMETER_NAME_REFERENCE_EXPRESSION");
  static const PARAMETER_TYPE_LIST = DartElementType._("PARAMETER_TYPE_LIST");
  static const PARENTHESIZED_EXPRESSION =
  DartElementType._("PARENTHESIZED_EXPRESSION");
  static const PART_OF_STATEMENT = DartElementType._("PART_OF_STATEMENT");
  static const PART_STATEMENT = DartElementType._("PART_STATEMENT");
  static const PREFIX_EXPRESSION = DartElementType._("PREFIX_EXPRESSION");
  static const PREFIX_OPERATOR = DartElementType._("PREFIX_OPERATOR");
  static const REDIRECTION = DartElementType._("REDIRECTION");
  static const REFERENCE_EXPRESSION = DartElementType._("REFERENCE_EXPRESSION");
  static const RELATIONAL_OPERATOR = DartElementType._("RELATIONAL_OPERATOR");
  static const RETHROW_STATEMENT = DartElementType._("RETHROW_STATEMENT");
  static const RETURN_STATEMENT = DartElementType._("RETURN_STATEMENT");
  static const RETURN_TYPE = DartElementType._("RETURN_TYPE");
  static const SETTER_DECLARATION = DartElementType._("SETTER_DECLARATION");
  static const SET_LITERAL_EXPRESSION =
  DartElementType._("SET_LITERAL_EXPRESSION");
  static const SHIFT_EXPRESSION = DartElementType._("SHIFT_EXPRESSION");
  static const SHIFT_OPERATOR = DartElementType._("SHIFT_OPERATOR");
  static const SHORT_TEMPLATE_ENTRY = DartElementType._("SHORT_TEMPLATE_ENTRY");
  static const SHOW_COMBINATOR = DartElementType._("SHOW_COMBINATOR");
  static const SIMPLE_FORMAL_PARAMETER =
  DartElementType._("SIMPLE_FORMAL_PARAMETER");
  static const SIMPLE_TYPE = DartElementType._("SIMPLE_TYPE");
  static const STATEMENTS = DartElementType._("STATEMENTS");
  static const STRING_LITERAL_EXPRESSION =
  DartElementType._("STRING_LITERAL_EXPRESSION");
  static const SUFFIX_EXPRESSION = DartElementType._("SUFFIX_EXPRESSION");
  static const SUPERCLASS = DartElementType._("SUPERCLASS");
  static const SUPER_CALL_OR_FIELD_INITIALIZER =
  DartElementType._("SUPER_CALL_OR_FIELD_INITIALIZER");
  static const SUPER_EXPRESSION = DartElementType._("SUPER_EXPRESSION");
  static const SWITCH_CASE = DartElementType._("SWITCH_CASE");
  static const SWITCH_STATEMENT = DartElementType._("SWITCH_STATEMENT");
  static const SYMBOL_LITERAL_EXPRESSION =
  DartElementType._("SYMBOL_LITERAL_EXPRESSION");
  static const TERNARY_EXPRESSION = DartElementType._("TERNARY_EXPRESSION");
  static const THIS_EXPRESSION = DartElementType._("THIS_EXPRESSION");
  static const THROW_EXPRESSION = DartElementType._("THROW_EXPRESSION");
  static const TRY_STATEMENT = DartElementType._("TRY_STATEMENT");
  static const TYPE = DartElementType._("TYPE");
  static const TYPED_FUNCTION_TYPE = DartElementType._("TYPED_FUNCTION_TYPE");
  static const TYPE_ARGUMENTS = DartElementType._("TYPE_ARGUMENTS");
  static const TYPE_LIST = DartElementType._("TYPE_LIST");
  static const TYPE_PARAMETER = DartElementType._("TYPE_PARAMETER");
  static const TYPE_PARAMETERS = DartElementType._("TYPE_PARAMETERS");
  static const UNTYPED_FUNCTION_TYPE =
  DartElementType._("UNTYPED_FUNCTION_TYPE");
  static const URI_ELEMENT = DartElementType._("URI_ELEMENT");
  static const USER_DEFINABLE_OPERATOR =
  DartElementType._("USER_DEFINABLE_OPERATOR");
  static const VALUE_EXPRESSION = DartElementType._("VALUE_EXPRESSION");
  static const VAR_ACCESS_DECLARATION =
  DartElementType._("VAR_ACCESS_DECLARATION");
  static const VAR_DECLARATION_LIST = DartElementType._("VAR_DECLARATION_LIST");
  static const VAR_DECLARATION_LIST_PART =
  DartElementType._("VAR_DECLARATION_LIST_PART");
  static const VAR_INIT = DartElementType._("VAR_INIT");
  static const VOID_TYPE_FUNCTION_TYPE =
  DartElementType._("VOID_TYPE_FUNCTION_TYPE");
  static const WHILE_STATEMENT = DartElementType._("WHILE_STATEMENT");
  static const YIELD_EACH_STATEMENT = DartElementType._("YIELD_EACH_STATEMENT");
  static const YIELD_STATEMENT = DartElementType._("YIELD_STATEMENT");

  static const ABSTRACT = DartElementType._("abstract");
  static const AND = DartElementType._("&");
  static const AND_AND = DartElementType._("&&");
  static const AND_AND_EQ = DartElementType._("&&=");
  static const AND_EQ = DartElementType._("&=");
  static const AS = DartElementType._("as");
  static const ASSERT = DartElementType._("assert");
  static const ASYNC = DartElementType._("async");
  static const AT = DartElementType._("@");
  static const AWAIT = DartElementType._("await");
  static const BIN_NOT = DartElementType._("~");
  static const BREAK = DartElementType._("break");
  static const CASE = DartElementType._("case");
  static const CATCH = DartElementType._("catch");
  static const CLASS = DartElementType._("class");
  static const CLOSING_QUOTE = DartElementType._("CLOSING_QUOTE");
  static const COLON = DartElementType._(":");
  static const COMMA = DartElementType._(",");
  static const CONST = DartElementType._("const");
  static const CONTINUE = DartElementType._("continue");
  static const COVARIANT = DartElementType._("covariant");
  static const DEFAULT = DartElementType._("default");
  static const DEFERRED = DartElementType._("deferred");
  static const DIV = DartElementType._("/");
  static const DIV_EQ = DartElementType._("/=");
  static const DO = DartElementType._("do");
  static const DOT = DartElementType._(".");
  static const DOT_DOT = DartElementType._("..");
  static const ELSE = DartElementType._("else");
  static const ENUM = DartElementType._("enum");
  static const EQ = DartElementType._("=");
  static const EQ_EQ = DartElementType._("==");
  static const EXPORT = DartElementType._("export");
  static const EXPRESSION_BODY_DEF = DartElementType._("=>");
  static const EXTENDS = DartElementType._("extends");
  static const EXTERNAL = DartElementType._("external");
  static const FACTORY = DartElementType._("factory");
  static const FALSE = DartElementType._("false");
  static const FINAL = DartElementType._("final");
  static const FINALLY = DartElementType._("finally");
  static const FOR = DartElementType._("for");
  static const GET = DartElementType._("get");
  static const GT = DartElementType._(">");
  static const GT_EQ = DartElementType._(">=");
  static const GT_GT = DartElementType._(">>");
  static const GT_GT_EQ = DartElementType._(">>=");
  static const HASH = DartElementType._("#");
  static const HEX_NUMBER = DartElementType._("HEX_NUMBER");
  static const HIDE = DartElementType._("hide");
  static const IDENTIFIER = DartElementType._("IDENTIFIER");
  static const IF = DartElementType._("if");
  static const IMPLEMENTS = DartElementType._("implements");
  static const IMPORT = DartElementType._("import");
  static const IN = DartElementType._("in");
  static const INT_DIV = DartElementType._("~/");
  static const INT_DIV_EQ = DartElementType._("~/=");
  static const IS = DartElementType._("is");
  static const LBRACE = DartElementType._("{");
  static const LBRACKET = DartElementType._("[");
  static const LIBRARY = DartElementType._("library");
  static const LONG_TEMPLATE_ENTRY_END =
  DartElementType._("LONG_TEMPLATE_ENTRY_END");
  static const LONG_TEMPLATE_ENTRY_START =
  DartElementType._("LONG_TEMPLATE_ENTRY_START");
  static const LPAREN = DartElementType._("(");
  static const LT = DartElementType._("<");
  static const LT_EQ = DartElementType._("<=");
  static const LT_LT = DartElementType._("<<");
  static const LT_LT_EQ = DartElementType._("<<=");
  static const MINUS = DartElementType._("-");
  static const MINUS_EQ = DartElementType._("-=");
  static const MINUS_MINUS = DartElementType._("--");
  static const MIXIN = DartElementType._("mixin");
  static const MUL = DartElementType._("*");
  static const MUL_EQ = DartElementType._("*=");
  static const NATIVE = DartElementType._("native");
  static const NEQ = DartElementType._("!=");
  static const NEW = DartElementType._("new");
  static const NOT = DartElementType._("!");
  static const NULL = DartElementType._("null");
  static const NUMBER = DartElementType._("NUMBER");
  static const OF = DartElementType._("of");
  static const ON = DartElementType._("on");
  static const OPEN_QUOTE = DartElementType._("OPEN_QUOTE");
  static const OPERATOR = DartElementType._("operator");
  static const OR = DartElementType._("|");
  static const OR_EQ = DartElementType._("|=");
  static const OR_OR = DartElementType._("||");
  static const OR_OR_EQ = DartElementType._("||=");
  static const PART = DartElementType._("part");
  static const PLUS = DartElementType._("+");
  static const PLUS_EQ = DartElementType._("+=");
  static const PLUS_PLUS = DartElementType._("++");
  static const QUEST = DartElementType._("?");
  static const QUEST_DOT = DartElementType._("?.");
  static const QUEST_QUEST = DartElementType._("??");
  static const QUEST_QUEST_EQ = DartElementType._("??=");
  static const RAW_SINGLE_QUOTED_STRING =
  DartElementType._("RAW_SINGLE_QUOTED_STRING");
  static const RAW_TRIPLE_QUOTED_STRING =
  DartElementType._("RAW_TRIPLE_QUOTED_STRING");
  static const RBRACE = DartElementType._("}");
  static const RBRACKET = DartElementType._("]");
  static const REGULAR_STRING_PART = DartElementType._("REGULAR_STRING_PART");
  static const REM = DartElementType._("%");
  static const REM_EQ = DartElementType._("%=");
  static const RETHROW = DartElementType._("rethrow");
  static const RETURN = DartElementType._("return");
  static const RPAREN = DartElementType._(")");
  static const SEMICOLON = DartElementType._(";");
  static const SET = DartElementType._("set");
  static const SHORT_TEMPLATE_ENTRY_START =
  DartElementType._("SHORT_TEMPLATE_ENTRY_START");
  static const SHOW = DartElementType._("show");
  static const STATIC = DartElementType._("static");
  static const SUPER = DartElementType._("super");
  static const SWITCH = DartElementType._("switch");
  static const SYNC = DartElementType._("sync");
  static const THIS = DartElementType._("this");
  static const THROW = DartElementType._("throw");
  static const TRUE = DartElementType._("true");
  static const TRY = DartElementType._("try");
  static const TYPEDEF = DartElementType._("typedef");
  static const VAR = DartElementType._("var");
  static const VOID = DartElementType._("void");
  static const WHILE = DartElementType._("while");
  static const WITH = DartElementType._("with");
  static const XOR = DartElementType._("^");
  static const XOR_EQ = DartElementType._("^=");
  static const YIELD = DartElementType._("yield");
}

class DartElementType {
  const DartElementType._(this.debugDescription);

  final String debugDescription;

  @override
  String toString() => debugDescription;
}
